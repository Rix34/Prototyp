//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSettings/InputSystemForCamera(Player)/CameraInputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraInputController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraInputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraInputController"",
    ""maps"": [
        {
            ""name"": ""CameraActions"",
            ""id"": ""89414363-19ac-4ed0-8790-5cc261db7d00"",
            ""actions"": [
                {
                    ""name"": ""MovementCamera"",
                    ""type"": ""Value"",
                    ""id"": ""282d4a4e-88bc-40d5-a057-93636a210e36"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateCamera"",
                    ""type"": ""Value"",
                    ""id"": ""4ad1e4b0-faf4-4fe7-bac4-eef4032b2af0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomCamera"",
                    ""type"": ""Value"",
                    ""id"": ""a681a25f-3a2f-473e-a275-cc8a4641f9bb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""70c5e586-8795-4856-b65e-aa2040f82523"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""21fce458-25cb-4273-abb7-489609f723c6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4fbbff3a-4c46-43d7-a960-62ad8a370b91"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4a522e43-81fa-45b7-a330-8b2dd8516d8b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ac923a47-4277-4172-b3cc-b10c258777de"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""36284e42-e807-4a68-bc9c-00a3753d1739"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2eac36d3-9c63-4d04-ac54-ad9b39cbab80"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CameraActions
        m_CameraActions = asset.FindActionMap("CameraActions", throwIfNotFound: true);
        m_CameraActions_MovementCamera = m_CameraActions.FindAction("MovementCamera", throwIfNotFound: true);
        m_CameraActions_RotateCamera = m_CameraActions.FindAction("RotateCamera", throwIfNotFound: true);
        m_CameraActions_ZoomCamera = m_CameraActions.FindAction("ZoomCamera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CameraActions
    private readonly InputActionMap m_CameraActions;
    private ICameraActionsActions m_CameraActionsActionsCallbackInterface;
    private readonly InputAction m_CameraActions_MovementCamera;
    private readonly InputAction m_CameraActions_RotateCamera;
    private readonly InputAction m_CameraActions_ZoomCamera;
    public struct CameraActionsActions
    {
        private @CameraInputController m_Wrapper;
        public CameraActionsActions(@CameraInputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementCamera => m_Wrapper.m_CameraActions_MovementCamera;
        public InputAction @RotateCamera => m_Wrapper.m_CameraActions_RotateCamera;
        public InputAction @ZoomCamera => m_Wrapper.m_CameraActions_ZoomCamera;
        public InputActionMap Get() { return m_Wrapper.m_CameraActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActionsActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActionsActions instance)
        {
            if (m_Wrapper.m_CameraActionsActionsCallbackInterface != null)
            {
                @MovementCamera.started -= m_Wrapper.m_CameraActionsActionsCallbackInterface.OnMovementCamera;
                @MovementCamera.performed -= m_Wrapper.m_CameraActionsActionsCallbackInterface.OnMovementCamera;
                @MovementCamera.canceled -= m_Wrapper.m_CameraActionsActionsCallbackInterface.OnMovementCamera;
                @RotateCamera.started -= m_Wrapper.m_CameraActionsActionsCallbackInterface.OnRotateCamera;
                @RotateCamera.performed -= m_Wrapper.m_CameraActionsActionsCallbackInterface.OnRotateCamera;
                @RotateCamera.canceled -= m_Wrapper.m_CameraActionsActionsCallbackInterface.OnRotateCamera;
                @ZoomCamera.started -= m_Wrapper.m_CameraActionsActionsCallbackInterface.OnZoomCamera;
                @ZoomCamera.performed -= m_Wrapper.m_CameraActionsActionsCallbackInterface.OnZoomCamera;
                @ZoomCamera.canceled -= m_Wrapper.m_CameraActionsActionsCallbackInterface.OnZoomCamera;
            }
            m_Wrapper.m_CameraActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MovementCamera.started += instance.OnMovementCamera;
                @MovementCamera.performed += instance.OnMovementCamera;
                @MovementCamera.canceled += instance.OnMovementCamera;
                @RotateCamera.started += instance.OnRotateCamera;
                @RotateCamera.performed += instance.OnRotateCamera;
                @RotateCamera.canceled += instance.OnRotateCamera;
                @ZoomCamera.started += instance.OnZoomCamera;
                @ZoomCamera.performed += instance.OnZoomCamera;
                @ZoomCamera.canceled += instance.OnZoomCamera;
            }
        }
    }
    public CameraActionsActions @CameraActions => new CameraActionsActions(this);
    public interface ICameraActionsActions
    {
        void OnMovementCamera(InputAction.CallbackContext context);
        void OnRotateCamera(InputAction.CallbackContext context);
        void OnZoomCamera(InputAction.CallbackContext context);
    }
}
